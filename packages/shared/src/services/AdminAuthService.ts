import { generateId } from '../utils'
import { AdminDashboardAccess } from '../types/admin'

export class AdminAuthService {
  private readonly redisHelper: any
  private readonly prisma: any
  private readonly env: any
  
  constructor(redisHelper: any, prisma: any, env: any) {
    this.redisHelper = redisHelper
    this.prisma = prisma
    this.env = env
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
   */
  async generateDashboardAccess(adminId: number, ipAddress?: string): Promise<AdminDashboardAccess> {
    // –û—Ç–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–æ–∫–µ–Ω—ã –∞–¥–º–∏–Ω–∞
    await this.revokeAdminTokens(adminId)
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    const accessKey = generateId(16)
    const token = generateId(32)
    
    // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞: 15 –º–∏–Ω—É—Ç
    const expiresAt = new Date(Date.now() + 15 * 60 * 1000)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await this.prisma.adminDashboardToken.create({
      data: {
        adminId,
        token,
        accessKey,
        expiresAt,
        ipAddress
      }
    })
    
    // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const tokenData = {
      adminId,
      accessKey,
      expiresAt: expiresAt.toISOString(),
      isUsed: false,
      createdAt: new Date().toISOString(),
      ipAddress
    }
    
    const redisKey = `admin:dashboard:${token}`
    await this.redisHelper.setWithTTL(redisKey, tokenData, 15 * 60)
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
    const dashboardUrl = `${this.env.getAdminDashboardUrl()}/${token}`
    
    return {
      dashboardUrl,
      accessKey,
      expiresAt,
      instructions: '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞. –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç.'
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞
   */
  async validateDashboardToken(token: string, accessKey: string, ipAddress?: string): Promise<{
    valid: boolean
    adminId?: number
    tokenRecord?: any
    error?: string
  }> {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ Redis (–±—ã—Å—Ç—Ä–æ)
    const redisKey = `admin:dashboard:${token}`
    let tokenData = await this.redisHelper.get(redisKey)
    
    // –ï—Å–ª–∏ –≤ Redis –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
    if (!tokenData) {
      const dbToken = await this.prisma.adminDashboardToken.findUnique({
        where: { token },
        include: { admin: true }
      })
      
      if (!dbToken) {
        return { valid: false, error: '–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫' }
      }
      
      tokenData = {
        adminId: dbToken.adminId,
        accessKey: dbToken.accessKey,
        expiresAt: dbToken.expiresAt.toISOString(),
        isUsed: dbToken.isUsed,
        createdAt: dbToken.createdAt.toISOString()
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞
    if (tokenData.accessKey !== accessKey) {
      return { valid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞' }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏ —Ç–æ–∫–µ–Ω
    if (tokenData.isUsed) {
      return { valid: false, error: '–¢–æ–∫–µ–Ω —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if (new Date() > new Date(tokenData.expiresAt)) {
      await this.markTokenAsExpired(token)
      return { valid: false, error: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫' }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∑–∞–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ë–î
    const tokenRecord = await this.prisma.adminDashboardToken.findUnique({
      where: { token },
      include: { admin: true }
    })
    
    return {
      valid: true,
      adminId: tokenData.adminId,
      tokenRecord
    }
  }
  
  /**
   * –ü–æ–º–µ—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
   */
  async markTokenAsUsed(token: string, ipAddress?: string): Promise<void> {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    await this.prisma.adminDashboardToken.updateMany({
      where: { token },
      data: {
        isUsed: true,
        usedAt: new Date(),
        ipAddress
      }
    })
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ Redis
    const redisKey = `admin:dashboard:${token}`
    await this.redisHelper.del(redisKey)
  }
  
  /**
   * –ü–æ–º–µ—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–π
   */
  async markTokenAsExpired(token: string): Promise<void> {
    await this.redisHelper.del(`admin:dashboard:${token}`)
  }
  
  /**
   * –û—Ç–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∞–¥–º–∏–Ω–∞
   */
  async revokeAdminTokens(adminId: number): Promise<void> {
    // –ü–æ–º–µ—á–∞–µ–º –≤ –ë–î –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
    await this.prisma.adminDashboardToken.updateMany({
      where: {
        adminId,
        isUsed: false,
        expiresAt: { gt: new Date() }
      },
      data: {
        isUsed: true,
        usedAt: new Date()
      }
    })
    
    // –û—á–∏—â–∞–µ–º Redis
    const adminKey = `admin:pending:${adminId}`
    const activeToken = await this.redisHelper.get(adminKey)
    
    if (activeToken) {
      const tokenKey = `admin:dashboard:${activeToken}`
      await this.redisHelper.del(tokenKey)
      await this.redisHelper.del(adminKey)
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç –≤–µ–±-—Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  async createWebSession(adminId: number, ipAddress?: string, userAgent?: string): Promise<{
    sessionId: string
    accessToken: string
    refreshToken: string
    expiresAt: Date
  }> {
    const sessionId = generateId(32)
    const accessToken = generateId(64)
    const refreshToken = generateId(64)
    const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 –¥–Ω–µ–π
    
    const sessionData = {
      sessionId,
      adminId,
      accessToken,
      refreshToken,
      expiresAt: expiresAt.toISOString(),
      createdAt: new Date().toISOString(),
      lastActivity: new Date().toISOString(),
      ipAddress,
      userAgent
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ Redis
    await this.redisHelper.setWithTTL(
      `admin:web_session:${sessionId}`,
      sessionData,
      7 * 24 * 60 * 60 // 7 –¥–Ω–µ–π
    )
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh token –æ—Ç–¥–µ–ª—å–Ω–æ
    await this.redisHelper.setWithTTL(
      `admin:refresh:${refreshToken}`,
      { sessionId, adminId },
      30 * 24 * 60 * 60 // 30 –¥–Ω–µ–π
    )
    
    return {
      sessionId,
      accessToken,
      refreshToken,
      expiresAt
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ–±-—Å–µ—Å—Å–∏—é
   */
  async validateWebSession(sessionId: string): Promise<{
    valid: boolean
    admin?: any
    session?: any
  }> {
    const sessionData = await this.redisHelper.get(`admin:web_session:${sessionId}`)
    
    if (!sessionData) {
      return { valid: false }
    }
    
    if (new Date() > new Date(sessionData.expiresAt)) {
      await this.redisHelper.del(`admin:web_session:${sessionId}`)
      return { valid: false }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞
    const admin = await this.prisma.admin.findUnique({
      where: { id: sessionData.adminId }
    })
    
    if (!admin || !admin.isActive) {
      await this.redisHelper.del(`admin:web_session:${sessionId}`)
      return { valid: false }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    sessionData.lastActivity = new Date().toISOString()
    await this.redisHelper.setWithTTL(
      `admin:web_session:${sessionId}`,
      sessionData,
      7 * 24 * 60 * 60
    )
    
    return {
      valid: true,
      admin,
      session: sessionData
    }
  }
}
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
export class AdminBotMessages {
  static dashboardAccess(access: AdminDashboardAccess): string {
    const expiresIn = Math.floor((access.expiresAt.getTime() - Date.now()) / 60000)
    
    return `üîê **–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏**

**üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**
${access.dashboardUrl}

**üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞:**
\`${access.accessKey}\`

‚è∞ **–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** ${expiresIn} –º–∏–Ω—É—Ç

üìù **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ
2. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞
3. –í–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
‚Ä¢ –°—Å—ã–ª–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è
‚Ä¢ –ù–µ –¥–µ–ª–∏—Ç–µ—Å—å –∫–ª—é—á–æ–º —Å –¥—Ä—É–≥–∏–º–∏
‚Ä¢ –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ —Å—Å—ã–ª–∫–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π`
  }
  
  static accessDenied(role?: string): string {
    return `‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω**

–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.
${role ? `–í–∞—à–∞ —Ä–æ–ª—å: ${role}` : ''}

–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.`
  }
  
  static tokenExpired(): string {
    return `‚è∞ **–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫**

–í–∞—à —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–∞–Ω–¥–æ–π /dashboard`
  }
  
  static tokenAlreadyUsed(): string {
    return `üîí **–¢–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω**

–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –≤—Ö–æ–¥–∞. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–∞–Ω–¥–æ–π /dashboard`
  }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω –ø—Ä–∞–≤ –≤ –±–æ—Ç–µ
export class AdminBotMiddleware {
  private prisma: any // –ë—É–¥–µ—Ç –∏–Ω–∂–µ–∫—Ç–∏—Ç—å—Å—è
  
  constructor(prisma: any) {
    this.prisma = prisma
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
   */
  async checkAdminAccess(telegramId: bigint): Promise<{
    isAdmin: boolean
    admin?: any
    error?: string
  }> {
    try {
      const admin = await this.prisma.admin.findUnique({
        where: {
          telegramId,
          isActive: true
        }
      })
      
      if (!admin) {
        return {
          isAdmin: false,
          error: '–ù–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'
        }
      }
      
      return {
        isAdmin: true,
        admin
      }
    } catch (error) {
      return {
        isAdmin: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'
      }
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é
   */
  checkPermission(admin: any, action: string): boolean {
    // –°—É–ø–µ—Ä –∞–¥–º–∏–Ω –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞
    if (admin.role === 'SUPER_ADMIN') {
      return true
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤ permissions –æ–±—ä–µ–∫—Ç–µ
    const permissions = admin.permissions || {}
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    switch (action) {
      case 'dashboard_access':
        return ['SUPER_ADMIN', 'ORDER_MANAGER', 'FINANCE_MANAGER'].includes(admin.role)
      case 'orders_manage':
        return permissions.orders?.manage || admin.role === 'ORDER_MANAGER'
      case 'users_manage':
        return permissions.users?.manage || admin.role === 'SUPER_ADMIN'
      case 'finance_view':
        return permissions.finance?.view || ['SUPER_ADMIN', 'FINANCE_MANAGER'].includes(admin.role)
      default:
        return false
    }
  }
}