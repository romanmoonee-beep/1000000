import { Bot, Context, session, SessionFlavor } from 'grammy'
import { conversations, ConversationFlavor, createConversation } from '@grammyjs/conversations'
import { hydrate, HydrateFlavor } from '@grammyjs/hydrate'
import { parseMode, ParseModeFlavor } from '@grammyjs/parse-mode'

// –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
import { env, getTelegramConfig, RuntimeUrls, getApiUrl, getFrontendUrl, getAdminDashboardUrl } from '@cargo/config'
import { prisma } from '@cargo/database'
import { redisHelper } from '@cargo/config'
import { BotCommand } from '@cargo/shared'

// –ò–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
import { setupCommands } from './handlers/commands'
import { setupCallbacks } from './handlers/callbacks'
import { setupMessages } from './handlers/messages'
import { setupScenes } from './handlers/scenes'

// –ò–º–ø–æ—Ä—Ç—ã middleware
import { setupAuth } from './middleware/auth'
import { setupLogging } from './middleware/logging'
import { setupSession } from './middleware/session'
import { setupErrorHandler } from './middleware/errorHandler'

// –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
import { BotServices } from './services'

// –¢–∏–ø—ã —Å–µ—Å—Å–∏–∏
interface SessionData {
  scene?: string
  data?: Record<string, any>
  userId?: bigint
  adminId?: number
  lastActivity?: Date
}

// –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
type BotContext = Context & 
  SessionFlavor<SessionData> & 
  ConversationFlavor & 
  HydrateFlavor<Context> & 
  ParseModeFlavor<Context> & {
    services: BotServices
  }

class CargoExpressBot {
  private bot: Bot<BotContext>
  private services: BotServices

  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º URL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    RuntimeUrls.init({
      apiUrl: getApiUrl(),
      frontendUrl: getFrontendUrl(),
      adminDashboardUrl: getAdminDashboardUrl()
    })

    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    const telegramConfig = getTelegramConfig()
    this.bot = new Bot<BotContext>(telegramConfig.token)

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    this.services = new BotServices(prisma, redisHelper)

    console.log('ü§ñ CargoExpress Bot initializing...')
    console.log('üìç URLs:', RuntimeUrls.getConfig())
  }

  async initialize(): Promise<void> {
    try {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware
      this.setupMiddleware()

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      this.setupHandlers()

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
      await this.setupBotCommands()

      console.log('‚úÖ Bot initialized successfully')
    } catch (error) {
      console.error('‚ùå Bot initialization failed:', error)
      throw error
    }
  }

  private setupMiddleware(): void {
    // Hydration –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.use(hydrate())

    // Parse mode –¥–ª—è HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    this.bot.use(parseMode('HTML'))

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    this.bot.use(setupLogging())

    // –°–µ—Å—Å–∏–∏
    this.bot.use(session({
      initial: (): SessionData => ({}),
      storage: setupSession(redisHelper)
    }))

    // Conversations –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
    this.bot.use(conversations())

    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    this.bot.use(setupAuth(this.services))

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    this.bot.use((ctx, next) => {
      ctx.services = this.services
      return next()
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.catch(setupErrorHandler())
  }

  private setupHandlers(): void {
    // –ö–æ–º–∞–Ω–¥—ã (/start, /admin, /dashboard –∏ —Ç.–¥.)
    setupCommands(this.bot, this.services)

    // Callback queries (inline –∫–Ω–æ–ø–∫–∏)
    setupCallbacks(this.bot, this.services)

    // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    setupMessages(this.bot, this.services)

    // –°—Ü–µ–Ω—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    setupScenes(this.bot, this.services)
  }

  private async setupBotCommands(): Promise<void> {
    const commands = [
      { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
      { command: 'help', description: '–ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏' },
      { command: 'profile', description: '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' },
      { command: 'orders', description: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' },
      { command: 'balance', description: '–ë–∞–ª–∞–Ω—Å –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' },
      { command: 'support', description: '–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π' }
    ]

    await this.bot.api.setMyCommands(commands)
    console.log('üìù Bot commands set')
  }

  async start(): Promise<void> {
    if (env.NODE_ENV === 'production' && env.TELEGRAM_WEBHOOK_URL) {
      // Production: –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook
      await this.setupWebhook()
    } else {
      // Development: –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
      await this.startPolling()
    }
  }

  private async setupWebhook(): Promise<void> {
    const webhookUrl = env.TELEGRAM_WEBHOOK_URL!
    const webhookSecret = env.TELEGRAM_WEBHOOK_SECRET

    await this.bot.api.setWebhook(webhookUrl, {
      secret_token: webhookSecret,
      max_connections: 100,
      allowed_updates: ['message', 'callback_query', 'inline_query']
    })

    console.log(`üï∏Ô∏è Webhook set: ${webhookUrl}`)
  }

  private async startPolling(): Promise<void> {
    console.log('üîÑ Starting polling...')
    
    // Graceful shutdown
    const handleShutdown = async (signal: string) => {
      console.log(`\nüì¥ Received ${signal}, shutting down gracefully...`)
      await this.bot.stop()
      await prisma.$disconnect()
      await redisHelper.redis.quit()
      process.exit(0)
    }

    process.on('SIGINT', () => handleShutdown('SIGINT'))
    process.on('SIGTERM', () => handleShutdown('SIGTERM'))

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await this.bot.start({
      onStart: (botInfo) => {
        console.log(`üöÄ Bot @${botInfo.username} started successfully!`)
        console.log(`üÜî Bot ID: ${botInfo.id}`)
        console.log(`üë§ Bot Name: ${botInfo.first_name}`)
      }
    })
  }

  async stop(): Promise<void> {
    console.log('‚èπÔ∏è Stopping bot...')
    await this.bot.stop()
    console.log('‚úÖ Bot stopped')
  }

  // Getter –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Express (–¥–ª—è webhook)
  get webhookCallback() {
    return this.bot.webhookCallback
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function main() {
  try {
    const bot = new CargoExpressBot()
    await bot.initialize()
    await bot.start()
  } catch (error) {
    console.error('üí• Fatal error:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main()
}

export { CargoExpressBot, BotContext }
export default CargoExpressBot