import { CommandContext } from 'grammy'
import { BotContext } from '../../bot'
import { ErrorUtils } from '../../middleware'
import { formatCurrency, getStatusText, getStatusColor } from '@cargo/shared'

export async function handleOrdersCommand(ctx: CommandContext<BotContext>) {
  try {
    const userId = await ErrorUtils.validateUser(ctx)
    const user = await ctx.services.user.getByTelegramId(BigInt(ctx.from!.id))
    
    if (!user) {
      await ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start')
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const ordersData = await ctx.services.order.getUserOrders(user.id, {
      limit: 10,
      type: 'all'
    })

    const { shipping, purchase } = ordersData
    const allOrders = [...shipping, ...purchase].sort((a, b) => 
      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
    )

    if (allOrders.length === 0) {
      await sendEmptyOrdersMessage(ctx)
      return
    }

    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
    const activeOrders = allOrders.filter(order => 
      !['DELIVERED', 'CANCELLED', 'REFUNDED'].includes(order.status)
    )
    
    const completedOrders = allOrders.filter(order => 
      ['DELIVERED', 'CANCELLED', 'REFUNDED'].includes(order.status)
    )

    await sendOrdersList(ctx, activeOrders, completedOrders)

  } catch (error) {
    console.error('Orders command error:', error)
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤.')
  }
}

async function sendEmptyOrdersMessage(ctx: CommandContext<BotContext>) {
  const emptyText = `
üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤

–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑:
‚Ä¢ üì¶ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—ã–ª–∫—É —Å –ª—é–±–æ–≥–æ —Å–∫–ª–∞–¥–∞
‚Ä¢ üõí –ó–∞–∫–∞–∂–∏—Ç–µ –≤—ã–∫—É–ø —Ç–æ–≤–∞—Ä–∞

–ú—ã –ø–æ–º–æ–∂–µ–º –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à–∏ –ø–æ–∫—É–ø–∫–∏ –±—ã—Å—Ç—Ä–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ!`

  await ctx.reply(emptyText, {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É', callback_data: 'send_package' },
          { text: 'üõí –í—ã–∫—É–ø —Ç–æ–≤–∞—Ä–∞', callback_data: 'buy_product' }
        ],
        [
          { text: 'üè¢ –ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤', callback_data: 'view_warehouses' },
          { text: 'üí∞ –¢–∞—Ä–∏—Ñ—ã', callback_data: 'shipping_rates' }
        ],
        [
          { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
        ]
      ]
    }
  })
}

async function sendOrdersList(
  ctx: CommandContext<BotContext>, 
  activeOrders: any[], 
  completedOrders: any[]
) {
  let ordersText = 'üì¶ <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</b>\n\n'

  // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
  if (activeOrders.length > 0) {
    ordersText += 'üîÑ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n'
    
    for (const order of activeOrders.slice(0, 5)) {
      const orderType = 'countryFrom' in order ? 'SP' : 'PU'
      const orderNumber = `#${orderType}${order.id}`
      const statusText = getStatusText(order.status)
      const country = order.countryFrom || order.country
      
      ordersText += `${country.flagEmoji} ${orderNumber} | ${statusText}\n`
      ordersText += `üí∞ ${formatCurrency(order.totalCost)}\n\n`
    }
    
    if (activeOrders.length > 5) {
      ordersText += `... –∏ –µ—â–µ ${activeOrders.length - 5} –∑–∞–∫–∞–∑–æ–≤\n\n`
    }
  }

  // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
  if (completedOrders.length > 0) {
    ordersText += '‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n'
    
    for (const order of completedOrders.slice(0, 3)) {
      const orderType = 'countryFrom' in order ? 'SP' : 'PU'
      const orderNumber = `#${orderType}${order.id}`
      const statusText = getStatusText(order.status)
      const country = order.countryFrom || order.country
      
      ordersText += `${country.flagEmoji} ${orderNumber} | ${statusText}\n`
    }
    
    if (completedOrders.length > 3) {
      ordersText += `\nüìã –í—Å–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${completedOrders.length}`
    }
  }

  // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
  const keyboard = []
  
  // –ö–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
  if (activeOrders.length > 0) {
    const activeButtons = activeOrders.slice(0, 2).map(order => {
      const orderType = 'countryFrom' in order ? 'SP' : 'PU'
      const orderNumber = `${orderType}${order.id}`
      return {
        text: `üì¶ ${orderNumber}`,
        callback_data: `view_order_${orderType}_${order.id}`
      }
    })
    keyboard.push(activeButtons)
  }

  // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  keyboard.push([
    { text: 'üìç –û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É', callback_data: 'track_by_number' },
    { text: 'üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ', callback_data: 'show_all_orders' }
  ])

  keyboard.push([
    { text: 'üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', callback_data: 'send_package' },
    { text: 'üõí –í—ã–∫—É–ø —Ç–æ–≤–∞—Ä–∞', callback_data: 'buy_product' }
  ])

  keyboard.push([
    { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
  ])

  await ctx.reply(ordersText, {
    reply_markup: { inline_keyboard: keyboard }
  })
}