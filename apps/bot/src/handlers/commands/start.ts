import { CommandContext } from 'grammy'
import { BotContext } from '../../bot'
import { ErrorUtils } from '../../middleware'

export async function handleStartCommand(ctx: CommandContext<BotContext>) {
  try {
    const user = ctx.from
    if (!user) return

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ payload –≤ –∫–æ–º–∞–Ω–¥–µ
    const payload = ctx.match

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    const dbUser = await ctx.services.user.getByTelegramId(BigInt(user.id))

    if (!dbUser) {
      // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
      await sendWelcomeMessage(ctx)
    } else {
      // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (payload) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º deep link payload
        await handleDeepLink(ctx, payload, dbUser)
      } else {
        // –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await sendMainMenu(ctx, dbUser)
      }
    }
  } catch (error) {
    console.error('Start command error:', error)
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
  }
}

async function sendWelcomeMessage(ctx: CommandContext<BotContext>) {
  const welcomeText = `
üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CargoExpress!</b>
–î–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑-–∑–∞ —Ä—É–±–µ–∂–∞ –≤ –†–æ—Å—Å–∏—é üá∑üá∫

üåç –†–∞–±–æ—Ç–∞–µ–º —Å–æ —Å–∫–ª–∞–¥–∞–º–∏ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É
üì¶ –î–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å—ã–ª–∫–∏ –∏ –≤—ã–∫—É–ø–∞–µ–º —Ç–æ–≤–∞—Ä—ã
‚ö° –ë—ã—Å—Ç—Ä–æ, –Ω–∞–¥–µ–∂–Ω–æ, –≤—ã–≥–æ–¥–Ω–æ

–ò–∑—É—á–∏—Ç–µ –Ω–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:`

  await ctx.reply(welcomeText, {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üè¢ –ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤', callback_data: 'view_warehouses' },
          { text: 'üìã –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç', callback_data: 'how_it_works' }
        ],
        [
          { text: 'üí∞ –¢–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏', callback_data: 'shipping_rates' },
          { text: 'üõí –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤', callback_data: 'sample_products' }
        ],
        [
          { text: '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', callback_data: 'start_registration' }
        ]
      ]
    }
  })
}

async function sendMainMenu(ctx: CommandContext<BotContext>, user: any) {
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [activeOrders, balance] = await Promise.all([
    ctx.services.order.getActiveUserOrders(user.id),
    ctx.services.user.getBalance(user.telegramId)
  ])

  const vipStatus = user.isVip ? ' | üéÅ VIP ‚≠ê' : ''
  
  const welcomeText = `
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.firstName || '–¥—Ä—É–≥'}!

üÜî ID: #${user.id} | üí∞ –ë–∞–ª–∞–Ω—Å: ${balance.toLocaleString('ru-RU')}‚ÇΩ
üì¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${activeOrders.count}${vipStatus}`

  await ctx.reply(welcomeText, {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É', callback_data: 'send_package' },
          { text: 'üõí –í—ã–∫—É–ø —Ç–æ–≤–∞—Ä–∞', callback_data: 'buy_product' }
        ],
        [
          { text: 'üè¢ –ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤', callback_data: 'view_warehouses' },
          { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'view_profile' }
        ]
      ]
    }
  })
}

async function handleDeepLink(ctx: CommandContext<BotContext>, payload: string, user: any) {
  try {
    const [action, ...params] = payload.split('_')

    switch (action) {
      case 'order':
        // –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑: /start order_SP12345
        const orderId = params.join('_')
        await handleOrderDeepLink(ctx, orderId)
        break

      case 'ref':
        // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: /start ref_123456
        const referrerId = params[0]
        await handleReferralDeepLink(ctx, referrerId, user)
        break

      case 'support':
        // –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /start support
        await handleSupportDeepLink(ctx, params[0])
        break

      case 'product':
        // –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: /start product_123
        const productId = params[0]
        await handleProductDeepLink(ctx, productId)
        break

      default:
        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π payload - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await sendMainMenu(ctx, user)
    }
  } catch (error) {
    console.error('Deep link error:', error)
    await sendMainMenu(ctx, user)
  }
}

async function handleOrderDeepLink(ctx: CommandContext<BotContext>, orderId: string) {
  try {
    // –ü–∞—Ä—Å–∏–º ID –∑–∞–∫–∞–∑–∞
    const match = orderId.match(/^(SP|PU)(\d+)$/)
    if (!match) {
      await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.')
      return
    }

    const [, type, id] = match
    const orderBigInt = BigInt(id)

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
    let order
    if (type === 'SP') {
      order = await ctx.services.order.getShippingOrder(orderBigInt)
    } else {
      order = await ctx.services.order.getPurchaseOrder(orderBigInt)
    }

    if (!order) {
      await ctx.reply('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (order.userId !== ctx.session.userId) {
      await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.')
      return
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    await ctx.reply('üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üì¶ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞', callback_data: `view_order_${type}_${id}` }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
      }
    })

  } catch (error) {
    console.error('Order deep link error:', error)
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ.')
  }
}

async function handleReferralDeepLink(ctx: CommandContext<BotContext>, referrerId: string, user: any) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π (—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤–ø–µ—Ä–≤—ã–µ)
    if (user.registrationDate.getTime() > Date.now() - 5 * 60 * 1000) { // 5 –º–∏–Ω—É—Ç
      // –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
      const referrer = await ctx.services.user.getByTelegramId(BigInt(referrerId))
      
      if (referrer && referrer.id !== user.id) {
        // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        await ctx.services.payment.createBonus(
          referrer.id,
          500, // 500 —Ä—É–±–ª–µ–π –±–æ–Ω—É—Å
          `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.firstName || user.telegramId}`,
          { referredUserId: user.id.toString() }
        )

        // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await ctx.services.payment.createBonus(
          user.id,
          200, // 200 —Ä—É–±–ª–µ–π –±–æ–Ω—É—Å
          '–ë–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ'
        )

        await ctx.reply(
          'üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n\n' +
          'üí∞ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ 200‚ÇΩ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞.'
        )
      }
    }

    await sendMainMenu(ctx, user)
  } catch (error) {
    console.error('Referral deep link error:', error)
    await sendMainMenu(ctx, user)
  }
}

async function handleSupportDeepLink(ctx: CommandContext<BotContext>, ticketId?: string) {
  if (ticketId) {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–∫–µ—Ç
    await ctx.reply('üí¨ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏...', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π', callback_data: 'contact_support' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
      }
    })
  } else {
    // –û–±—â–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    await ctx.reply('üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ CargoExpress', {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data: 'faq' },
            { text: 'üìç –ì–¥–µ –º–æ—è –ø–æ—Å—ã–ª–∫–∞?', callback_data: 'track_package' }
          ],
          [
            { text: 'üí∞ –í–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ', callback_data: 'payment_support' },
            { text: 'üì¶ –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º', callback_data: 'order_support' }
          ],
          [
            { text: 'üí¨ –ß–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', callback_data: 'contact_support' }
          ],
          [
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
          ]
        ]
      }
    })
  }
}

async function handleProductDeepLink(ctx: CommandContext<BotContext>, productId: string) {
  try {
    const product = await ctx.services.country.getFixedPriceProduct(parseInt(productId))
    
    if (!product) {
      await ctx.reply('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.')
      return
    }

    const productText = `
üì± <b>${product.name}</b>

üí∞ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: $${product.price}
üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ - –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–ª–∞—Ç –∑–∞ —Ç–æ–≤–∞—Ä!

${product.description ? `üìã ${product.description}\n` : ''}
üåç –°—Ç—Ä–∞–Ω–∞: ${product.country.flagEmoji} ${product.country.name}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category.icon} ${product.category.name}

‚öñÔ∏è –ü—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å: ${product.estimatedWeight || '—É—Ç–æ—á–Ω—è–µ—Ç—Å—è'} –∫–≥`

    await ctx.reply(productText, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üõí –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä', callback_data: `order_product_${productId}` }],
          [
            { text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', callback_data: `share_product_${productId}` },
            { text: '‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data: `favorite_product_${productId}` }
          ],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
      }
    })
  } catch (error) {
    console.error('Product deep link error:', error)
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.')
  }
}