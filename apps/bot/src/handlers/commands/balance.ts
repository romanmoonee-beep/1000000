import { CommandContext } from 'grammy'
import { BotContext } from '../../bot'
import { ErrorUtils } from '../../middleware'
import { TransactionType, formatCurrency } from '@cargo/shared'

export async function handleBalanceCommand(ctx: CommandContext<BotContext>) {
  try {
    const userId = await ErrorUtils.validateUser(ctx)
    const user = await ctx.services.user.getByTelegramId(BigInt(ctx.from!.id))
    
    if (!user) {
      await ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start')
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const transactions = await ctx.services.payment.getUserTransactions(user.id, {
      limit: 5
    })

    const balanceText = `
üí∞ <b>–ë–∞–ª–∞–Ω—Å: ${formatCurrency(user.balance)}</b>

${user.isVip ? 'üéÅ VIP —Å—Ç–∞—Ç—É—Å: –∫—ç—à–±—ç–∫ 2%\n' : ''}
${await getBalanceInfo(ctx, user)}

üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>
${await formatTransactions(transactions)}`

    await ctx.reply(balanceText, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data: 'top_up_balance' },
            { text: 'üìä –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏', callback_data: 'all_transactions' }
          ],
          [
            { text: 'üéÅ –ë–æ–Ω—É—Å—ã', callback_data: 'bonus_info' },
            { text: '‚≠ê VIP —Å—Ç–∞—Ç—É—Å', callback_data: 'vip_info' }
          ],
          [
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
          ]
        ]
      }
    })

  } catch (error) {
    console.error('Balance command error:', error)
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ.')
  }
}

async function getBalanceInfo(ctx: CommandContext<BotContext>, user: any): Promise<string> {
  let info = ''
  
  if (user.balance < 1000) {
    info += '‚ö†Ô∏è –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–æ–≤.\n'
  }
  
  if (user.isVip && user.vipExpiresAt) {
    const daysLeft = Math.ceil((user.vipExpiresAt.getTime() - Date.now()) / (1000 * 60 * 60 * 24))
    if (daysLeft <= 7) {
      info += `‚è∞ VIP —Å—Ç–∞—Ç—É—Å –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${daysLeft} –¥–Ω.\n`
    }
  }
  
  return info
}

async function formatTransactions(transactions: any[]): Promise<string> {
  if (transactions.length === 0) {
    return '–û–ø–µ—Ä–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç'
  }

  return transactions.slice(0, 5).map(tx => {
    const icon = getTransactionIcon(tx.type)
    const amount = tx.type === TransactionType.WITHDRAWAL ? `-${formatCurrency(tx.amount)}` : `+${formatCurrency(tx.amount)}`
    const date = new Date(tx.createdAt).toLocaleDateString('ru-RU')
    const status = tx.status === 'COMPLETED' ? '‚úÖ' : tx.status === 'PENDING' ? '‚è≥' : '‚ùå'
    
    return `${icon} ${amount} ${status} ${date}`
  }).join('\n')
}

function getTransactionIcon(type: string): string {
  switch (type) {
    case TransactionType.PAYMENT:
      return 'üí≥'
    case TransactionType.BONUS:
      return 'üéÅ'
    case TransactionType.REFUND:
      return 'üí∏'
    case TransactionType.WITHDRAWAL:
      return 'üì¶'
    default:
      return 'üí∞'
  }
}