import { CommandContext } from 'grammy'
import { BotContext } from '../../bot'
import { ErrorUtils } from '../../middleware'

export async function handleProfileCommand(ctx: CommandContext<BotContext>) {
  try {
    const userId = await ErrorUtils.validateUser(ctx)
    const user = await ctx.services.user.getByTelegramId(BigInt(ctx.from!.id))
    
    if (!user) {
      await ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start')
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [stats, activeOrders] = await Promise.all([
      ctx.services.user.getUserStats(user.telegramId),
      ctx.services.order.getActiveUserOrders(user.id)
    ])

    const vipStatus = user.isVip && user.vipExpiresAt
      ? ` | VIP –¥–æ ${user.vipExpiresAt.toLocaleDateString('ru-RU')}`
      : ''

    const profileText = `
üë§ <b>${user.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} ${user.lastName || ''}</b>
üÜî ID: #${user.id} | üí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance.toLocaleString('ru-RU')}‚ÇΩ

üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚îú –ó–∞–∫–∞–∑–æ–≤ –≤—Å–µ–≥–æ: ${stats.totalOrders}
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeOrders.count}  
‚îú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${stats.totalSpent.toLocaleString('ru-RU')}‚ÇΩ
‚îú –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${stats.averageOrderValue.toLocaleString('ru-RU')}‚ÇΩ
‚îî –î–Ω–µ–π —Å –Ω–∞–º–∏: ${stats.registrationDays}${vipStatus}

üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
${user.phone ? `‚îú –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}` : '‚îú –¢–µ–ª–µ—Ñ–æ–Ω: –Ω–µ —É–∫–∞–∑–∞–Ω'}
${user.email ? `‚îú Email: ${user.email}` : '‚îú Email: –Ω–µ —É–∫–∞–∑–∞–Ω'}
${user.city ? `‚îî –ì–æ—Ä–æ–¥: ${(user as any).city?.name || '–Ω–µ —É–∫–∞–∑–∞–Ω'}` : '‚îî –ì–æ—Ä–æ–¥: –Ω–µ —É–∫–∞–∑–∞–Ω'}`

    await ctx.reply(profileText, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' },
            { text: 'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: 'top_up_balance' }
          ],
          [
            { text: 'üìç –û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É', callback_data: 'track_package' },
            { text: 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'contact_support' }
          ],
          [
            { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'edit_profile' },
            { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'profile_settings' }
          ],
          [
            { text: 'üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', callback_data: 'referral_program' }
          ],
          [
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
          ]
        ]
      }
    })

  } catch (error) {
    console.error('Profile command error:', error)
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.')
  }
}