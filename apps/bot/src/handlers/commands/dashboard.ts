import { CommandContext } from 'grammy'
import { BotContext } from '../../bot'
import { requireAdmin } from '../../middleware'
import { AdminBotMessages } from '@cargo/shared'

export async function handleDashboardCommand(ctx: CommandContext<BotContext>) {
  try {
    const user = ctx.from
    if (!user) return

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    const adminCheck = await ctx.services.adminMiddleware.checkAdminAccess(
      BigInt(user.id)
    )

    if (!adminCheck.isAdmin) {
      await ctx.reply(AdminBotMessages.accessDenied())
      return
    }

    const admin = adminCheck.admin

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    const hasAccess = ctx.services.adminMiddleware.checkPermission(
      admin,
      'dashboard_access'
    )

    if (!hasAccess) {
      await ctx.reply(AdminBotMessages.accessDenied(admin.role))
      return
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    const access = await ctx.services.adminAuth.generateDashboardAccess(
      admin.id,
      ctx.from?.id?.toString() // IP –∞–¥—Ä–µ—Å –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ Telegram ID
    )

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
    await ctx.reply(AdminBotMessages.dashboardAccess(access), {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { 
              text: 'üîó –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 
              url: access.dashboardUrl 
            }
          ],
          [
            { 
              text: 'üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á', 
              callback_data: `copy_access_key_${access.accessKey}` 
            }
          ],
          [
            { text: 'üîÑ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω', callback_data: 'generate_new_dashboard_token' },
            { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_dashboard_access' }
          ]
        ]
      }
    })

    // –õ–æ–≥–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–∞
    console.log(`üîê Dashboard token generated for admin ${admin.firstName || admin.username} (${admin.id})`)

  } catch (error) {
    console.error('Dashboard command error:', error)
    await ctx.reply(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'contact_support' }]
          ]
        }
      }
    )
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
export async function handleNewDashboardToken(ctx: any) {
  try {
    await ctx.answerCallbackQuery('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω...')

    const user = ctx.from
    if (!user) return

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
    const adminCheck = await ctx.services.adminMiddleware.checkAdminAccess(
      BigInt(user.id)
    )

    if (!adminCheck.isAdmin) {
      await ctx.editMessageText(AdminBotMessages.accessDenied())
      return
    }

    const admin = adminCheck.admin

    // –û—Ç–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã
    await ctx.services.adminAuth.revokeAdminTokens(admin.id)

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    const access = await ctx.services.adminAuth.generateDashboardAccess(
      admin.id,
      user.id.toString()
    )

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.editMessageText(AdminBotMessages.dashboardAccess(access), {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { 
              text: 'üîó –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 
              url: access.dashboardUrl 
            }
          ],
          [
            { 
              text: 'üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á', 
              callback_data: `copy_access_key_${access.accessKey}` 
            }
          ],
          [
            { text: 'üîÑ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω', callback_data: 'generate_new_dashboard_token' },
            { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_dashboard_access' }
          ]
        ]
      }
    })

  } catch (error) {
    console.error('New dashboard token error:', error)
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞')
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞
export async function handleCopyAccessKey(ctx: any, accessKey: string) {
  try {
    await ctx.answerCallbackQuery('–ö–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!')

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    await ctx.reply(
      `üîë <b>–ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞:</b>\n<code>${accessKey}</code>`,
      { parse_mode: 'HTML' }
    )

  } catch (error) {
    console.error('Copy access key error:', error)
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª—é—á–∞')
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞
export async function handleCancelDashboardAccess(ctx: any) {
  try {
    await ctx.answerCallbackQuery('–î–æ—Å—Ç—É–ø –æ—Ç–º–µ–Ω–µ–Ω')

    const user = ctx.from
    if (!user) return

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
    const adminCheck = await ctx.services.adminMiddleware.checkAdminAccess(
      BigInt(user.id)
    )

    if (adminCheck.isAdmin) {
      // –û—Ç–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∞–¥–º–∏–Ω–∞
      await ctx.services.adminAuth.revokeAdminTokens(adminCheck.admin.id)
    }

    await ctx.editMessageText(
      '‚ùå –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω.\n\n–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã.',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ù–æ–≤—ã–π –¥–æ—Å—Ç—É–ø', callback_data: 'generate_new_dashboard_token' }]
          ]
        }
      }
    )

  } catch (error) {
    console.error('Cancel dashboard access error:', error)
    await ctx.answerCallbackQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–æ—Å—Ç—É–ø–∞')
  }
}