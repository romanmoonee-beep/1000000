import { CommandContext } from 'grammy'
import { BotContext } from '../../bot'
import { requireAdmin } from '../../middleware'

export async function handleAdminCommand(ctx: CommandContext<BotContext>) {
  try {
    const user = ctx.from
    if (!user) return

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    const adminCheck = await ctx.services.adminMiddleware.checkAdminAccess(
      BigInt(user.id)
    )

    if (!adminCheck.isAdmin) {
      await ctx.reply(
        '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
          }
        }
      )
      return
    }

    const admin = adminCheck.admin

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    const [orderStats, paymentStats, supportStats] = await Promise.all([
      ctx.services.order.getOrderStats(),
      ctx.services.payment.getPaymentStats(),
      ctx.services.support.getSupportStats()
    ])

    const dashboardText = `
üîß <b>AdminPanel CargoExpress</b>
üë®‚Äçüíº ${admin.firstName || admin.username} | ${admin.role}

üìä <b>DASHBOARD (${new Date().toLocaleDateString('ru-RU')})</b>

üí∞ <b>–§–ò–ù–ê–ù–°–´ –ó–ê –°–ï–ì–û–î–ù–Ø:</b>
‚îú –í—ã—Ä—É—á–∫–∞: ${paymentStats.today.amount.toLocaleString('ru-RU')}‚ÇΩ
‚îú –ü–ª–∞—Ç–µ–∂–µ–π: ${paymentStats.today.count} —à—Ç
‚îî –û–∂–∏–¥–∞—é—Ç: ${paymentStats.pending.count} (${paymentStats.pending.amount.toLocaleString('ru-RU')}‚ÇΩ)

üì¶ <b>–ó–ê–ö–ê–ó–´ –ó–ê –°–ï–ì–û–î–ù–Ø:</b>
‚îú –°–æ–∑–¥–∞–Ω–æ: ${orderStats.today.total} –∑–∞–∫–∞–∑–æ–≤
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${orderStats.active.total} –∑–∞–∫–∞–∑–æ–≤
‚îî –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö: ${orderStats.problems.total} –∑–∞–∫–∞–∑–æ–≤

üí¨ <b>–ü–û–î–î–ï–†–ñ–ö–ê:</b>
‚îú –û—Ç–∫—Ä—ã—Ç—ã—Ö —á–∞—Ç–æ–≤: ${supportStats.active.openChats}
‚îú –í –æ—á–µ—Ä–µ–¥–∏: ${supportStats.queue.pending} –æ–±—Ä–∞—â–µ–Ω–∏–π
‚îî –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ‚≠ê ${supportStats.today.averageResponseTime || 'N/A'}`

    const keyboard = []

    // –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if (admin.role === 'SUPER_ADMIN' || admin.role === 'ORDER_MANAGER') {
      keyboard.push([
        { text: `üì¶ –ó–∞–∫–∞–∑—ã${orderStats.problems.total > 0 ? ` (${orderStats.problems.total}‚ö†Ô∏è)` : ''}`, callback_data: 'admin_orders' },
        { text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin_users' }
      ])
    }

    if (admin.role === 'SUPER_ADMIN' || admin.role === 'FINANCE_MANAGER') {
      keyboard.push([
        { text: `üí∞ –§–∏–Ω–∞–Ω—Å—ã${paymentStats.pending.count > 0 ? ` (${paymentStats.pending.count}‚ö†Ô∏è)` : ''}`, callback_data: 'admin_finance' },
        { text: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'admin_analytics' }
      ])
    }

    if (admin.role === 'SUPER_ADMIN' || admin.role === 'SUPPORT_OPERATOR') {
      keyboard.push([
        { text: `üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞${supportStats.queue.pending > 0 ? ` (${supportStats.queue.pending}üî•)` : ''}`, callback_data: 'admin_support' }
      ])
    }

    if (admin.role === 'SUPER_ADMIN' || admin.role === 'CONTENT_MANAGER') {
      keyboard.push([
        { text: 'üåç –°—Ç—Ä–∞–Ω—ã –∏ —Å–∫–ª–∞–¥—ã', callback_data: 'admin_countries' }
      ])
    }

    if (admin.role === 'SUPER_ADMIN') {
      keyboard.push([
        { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'admin_settings' },
        { text: 'üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã', callback_data: 'admin_admins' }
      ])
    }

    // –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
    keyboard.push([
      { text: 'üåê –í–µ–± –∞–¥–º–∏–Ω–∫–∞', callback_data: 'web_dashboard' },
      { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_admin' }
    ])

    await ctx.reply(dashboardText, {
      reply_markup: { inline_keyboard: keyboard }
    })

  } catch (error) {
    console.error('Admin command error:', error)
    await ctx.reply(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'contact_support' }]
          ]
        }
      }
    )
  }
}