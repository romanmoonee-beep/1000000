import { ErrorHandler } from 'grammy'
import { BotContext } from '../bot'
import { GrammyError, HttpError } from 'grammy'

export function setupErrorHandler(): ErrorHandler<BotContext> {
  return async (error) => {
    const ctx = error.ctx
    const e = error.error

    console.error(`Error while handling update ${ctx.update.update_id}:`)

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
    const user = ctx.from
    const userInfo = user ? `@${user.username || user.first_name || user.id}` : 'Unknown'

    if (e instanceof GrammyError) {
      // –û—à–∏–±–∫–∏ Telegram API
      console.error('Error in request:', e.description)
      
      switch (e.error_code) {
        case 400:
          // Bad Request - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
          if (e.description.includes('message is not modified')) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–æ–≥–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            return
          }
          if (e.description.includes('query is too old')) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ callback –∑–∞–ø—Ä–æ—Å—ã
            return
          }
          break

        case 403:
          // Forbidden - –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
          console.log(`Bot blocked by user ${userInfo}`)
          
          if (ctx.services && user) {
            try {
              await ctx.services.user.removeOnline(BigInt(user.id))
            } catch (err) {
              console.error('Error removing user from online:', err)
            }
          }
          return

        case 429:
          // Too Many Requests - rate limit
          console.warn(`Rate limit exceeded for user ${userInfo}`)
          return

        case 500:
        case 502:
        case 503:
          // –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Telegram
          console.error('Telegram server error:', e.description)
          break
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await sendErrorMessage(ctx, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

    } else if (e instanceof HttpError) {
      // –û—à–∏–±–∫–∏ —Å–µ—Ç–∏
      console.error('Could not contact Telegram:', e)
      
    } else {
      // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
      console.error('Unknown error:', e)

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      let userMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.'

      if (e instanceof Error) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
        if (e.message.includes('User not found')) {
          userMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start'
        } else if (e.message.includes('Insufficient balance')) {
          userMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.'
        } else if (e.message.includes('Order not found')) {
          userMessage = '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        } else if (e.message.includes('Invalid')) {
          userMessage = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.'
        } else if (e.message.includes('timeout') || e.message.includes('ETIMEDOUT')) {
          userMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        } else if (e.message.includes('Database') || e.message.includes('connection')) {
          userMessage = '–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.'
        }
      }

      await sendErrorMessage(ctx, userMessage)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      await logErrorForAnalysis(ctx, e, userInfo)
    }
  }
}

async function sendErrorMessage(ctx: BotContext, message: string): Promise<void> {
  try {
    await ctx.reply(message, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
            { text: 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'contact_support' }
          ]
        ]
      }
    })
  } catch (error) {
    // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    console.error('Failed to send error message to user:', error)
  }
}

async function logErrorForAnalysis(ctx: BotContext, error: any, userInfo: string): Promise<void> {
  try {
    const errorData = {
      timestamp: new Date().toISOString(),
      updateId: ctx.update.update_id,
      user: userInfo,
      userId: ctx.from?.id,
      chatId: ctx.chat?.id,
      messageType: getMessageType(ctx),
      error: {
        name: error.name,
        message: error.message,
        stack: error.stack
      },
      session: ctx.session,
      environment: process.env.NODE_ENV
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    if (ctx.services) {
      const errorKey = `error_log:${Date.now()}:${ctx.update.update_id}`
      await ctx.services.redis?.setWithTTL(errorKey, errorData, 7 * 24 * 60 * 60) // 7 –¥–Ω–µ–π
    }

    // –í production —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (Sentry, LogRocket –∏ —Ç.–¥.)
    if (process.env.NODE_ENV === 'production' && process.env.SENTRY_DSN) {
      // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Sentry
      console.log('Error logged for analysis:', errorData)
    }

  } catch (logError) {
    console.error('Failed to log error for analysis:', logError)
  }
}

function getMessageType(ctx: BotContext): string {
  if (ctx.message) {
    if (ctx.message.text) return 'text'
    if (ctx.message.photo) return 'photo'
    if (ctx.message.document) return 'document'
    if (ctx.message.voice) return 'voice'
    if (ctx.message.video) return 'video'
    if (ctx.message.contact) return 'contact'
    if (ctx.message.location) return 'location'
    return 'message'
  }
  
  if (ctx.callbackQuery) return 'callback_query'
  if (ctx.inlineQuery) return 'inline_query'
  if (ctx.chosenInlineResult) return 'chosen_inline_result'
  
  return 'unknown'
}

// Middleware –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
export function setupGlobalErrorHandlers(): void {
  process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection at:', promise, 'reason:', reason)
    
    // –í production –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    if (process.env.NODE_ENV === 'production') {
      // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    }
  })

  process.on('uncaughtException', (error) => {
    console.error('Uncaught Exception:', error)
    
    // –í production –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    if (process.env.NODE_ENV === 'production') {
      // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      process.exit(1)
    }
  })
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö
export class ErrorUtils {
  static async handleAsync<T>(
    promise: Promise<T>,
    ctx?: BotContext,
    fallbackMessage?: string
  ): Promise<[T | null, Error | null]> {
    try {
      const result = await promise
      return [result, null]
    } catch (error) {
      console.error('Async operation failed:', error)
      
      if (ctx && fallbackMessage) {
        await sendErrorMessage(ctx, fallbackMessage)
      }
      
      return [null, error instanceof Error ? error : new Error(String(error))]
    }
  }

  static wrapHandler(handler: (ctx: BotContext) => Promise<void>) {
    return async (ctx: BotContext) => {
      try {
        await handler(ctx)
      } catch (error) {
        console.error('Handler error:', error)
        await sendErrorMessage(
          ctx, 
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
      }
    }
  }

  static async validateRequired<T>(
    value: T | undefined | null,
    ctx: BotContext,
    errorMessage: string
  ): Promise<T> {
    if (value === undefined || value === null) {
      await sendErrorMessage(ctx, errorMessage)
      throw new Error(errorMessage)
    }
    return value
  }

  static async validateUser(ctx: BotContext): Promise<bigint> {
    const userId = ctx.session.userId
    if (!userId) {
      await sendErrorMessage(ctx, '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start')
      throw new Error('User session not found')
    }
    return userId
  }

  static async validateAdmin(ctx: BotContext): Promise<number> {
    const adminId = ctx.session.adminId
    if (!adminId) {
      await sendErrorMessage(ctx, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
      throw new Error('Admin session not found')
    }
    return adminId
  }
}

// –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
export function handleErrors(target: any, propertyName: string, descriptor: PropertyDescriptor) {
  const method = descriptor.value

  descriptor.value = async function (...args: any[]) {
    try {
      return await method.apply(this, args)
    } catch (error) {
      console.error(`Error in ${target.constructor.name}.${propertyName}:`, error)
      
      // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —ç—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
      const ctx = args[0]
      if (ctx && typeof ctx.reply === 'function') {
        await sendErrorMessage(ctx, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.')
      }
      
      throw error
    }
  }

  return descriptor
}