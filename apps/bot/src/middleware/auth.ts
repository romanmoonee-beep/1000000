import { Middleware } from 'grammy'
import { BotContext } from '../bot'
import { BotServices } from '../services'
import { ErrorUtils } from './errorHandler'

export function setupAuth(services: BotServices): Middleware<BotContext> {
  return async (ctx, next) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (ctx.chat?.type !== 'private') {
      return // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    const telegramUser = ctx.from
    if (!telegramUser) {
      return
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await services.user.getOrCreate({
        telegramId: BigInt(telegramUser.id),
        username: telegramUser.username,
        firstName: telegramUser.first_name,
        lastName: telegramUser.last_name
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (user.isBlocked) {
        await ctx.reply(
          '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.',
          {
            reply_markup: {
              inline_keyboard: [[
                { text: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', url: 'https://t.me/support' }
              ]]
            }
          }
        )
        return
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–Ω–ª–∞–π–Ω
      await services.user.addOnline(BigInt(telegramUser.id))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ VIP
      if (user.isVip) {
        const vipExpired = await services.user.checkVipExpiration(BigInt(telegramUser.id))
        if (vipExpired) {
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ VIP
          await services.notification.sendVipExpired(user.id)
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
      ctx.session.userId = user.id
      ctx.session.lastActivity = new Date()

      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
      await next()

    } catch (error) {
      console.error('Auth middleware error:', error)
      
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
        {
          reply_markup: {
            inline_keyboard: [[
              { text: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'contact_support' }
            ]]
          }
        }
      )
    }
  }
}

export function requireAuth(): Middleware<BotContext> {
  return async (ctx, next) => {
    if (!ctx.session.userId) {
      await ctx.reply(
        '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ù–∞–ø–∏—à–∏—Ç–µ /start'
      )
      return
    }

    await next()
  }
}

export function requireAdmin(): Middleware<BotContext> {
  return async (ctx, next) => {
    if (!ctx.from) {
      return
    }

    try {
      const result = await ctx.services.adminMiddleware.checkAdminAccess(
        BigInt(ctx.from.id)
      )

      if (!result.isAdmin) {
        await ctx.reply(
          '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.'
        )
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é
      const hasAccess = ctx.services.adminMiddleware.checkPermission(
        result.admin,
        'dashboard_access'
      )

      if (!hasAccess) {
        await ctx.reply(
          `–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –í–∞—à–∞ —Ä–æ–ª—å: ${result.admin.role}`
        )
        return
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏
      ctx.session.adminId = result.admin.id

      await next()

    } catch (error) {
      console.error('Admin auth error:', error)
      await ctx.reply(
        '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      )
    }
  }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ VIP —Å—Ç–∞—Ç—É—Å–∞
export function requireVip(): Middleware<BotContext> {
  return async (ctx, next) => {
    try {
      const userId = await ErrorUtils.validateUser(ctx)
      const user = await ctx.services.user.getByTelegramId(BigInt(ctx.from!.id))

      if (!user?.isVip) {
        await ctx.reply(
          '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: '–°—Ç–∞—Ç—å VIP', callback_data: 'become_vip' }]
              ]
            }
          }
        )
        return
      }

      await next()
    } catch (error) {
      // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ validateUser
    }
  }
}

// Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
export function rateLimit(maxRequests: number = 10, windowMs: number = 60000): Middleware<BotContext> {
  return async (ctx, next) => {
    if (!ctx.from) {
      return
    }

    const userId = ctx.from.id
    const key = `rate_limit:${userId}`
    
    try {
      const current = await ctx.services.redis?.get(key)
      const requests = current ? parseInt(current) : 0

      if (requests >= maxRequests) {
        await ctx.reply('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        return
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      if (requests === 0) {
        await ctx.services.redis?.setWithTTL(key, '1', Math.floor(windowMs / 1000))
      } else {
        await ctx.services.redis?.incr(key)
      }

      await next()
    } catch (error) {
      console.error('Rate limit error:', error)
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
      await next()
    }
  }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
export function maintenanceMode(): Middleware<BotContext> {
  return async (ctx, next) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    const isMaintenanceMode = process.env.MAINTENANCE_MODE === 'true'
    
    if (isMaintenanceMode) {
      // –†–∞–∑—Ä–µ—à–∞–µ–º –∞–¥–º–∏–Ω–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤–æ –≤—Ä–µ–º—è —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
      const isAdmin = ctx.session.adminId !== undefined
      
      if (!isAdmin) {
        await ctx.reply(
          'üîß –ü—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', url: 'https://t.me/support' }]
              ]
            }
          }
        )
        return
      }
    }

    await next()
  }
}